<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://luyao787.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://luyao787.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-05-29T21:25:38+00:00</updated><id>https://luyao787.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">linear quadratic problem</title><link href="https://luyao787.github.io/blog/2025/LQP/" rel="alternate" type="text/html" title="linear quadratic problem"/><published>2025-05-25T00:00:00+00:00</published><updated>2025-05-25T00:00:00+00:00</updated><id>https://luyao787.github.io/blog/2025/LQP</id><content type="html" xml:base="https://luyao787.github.io/blog/2025/LQP/"><![CDATA[<p>In this blog, we introduce the recursive method for solving the following LQR problem:</p> \[\begin{aligned} \min_{\bar{x}, \bar{u}} \quad &amp;\sum_{k=0}^{N-1} \begin{bmatrix} q_k \\ r_k \end{bmatrix}^\top \begin{bmatrix} x_k \\ u_k \end{bmatrix} + \frac{1}{2} \begin{bmatrix} x_k \\ u_k \end{bmatrix}^\top \begin{bmatrix} Q_k &amp; S_k^\top \\ S_k &amp; R_k \end{bmatrix} \begin{bmatrix} x_k \\ u_k \end{bmatrix} \\ &amp;\quad\quad + p_N^\top x_N + \frac{1}{2} x_N^T P_N x_N \\ \text{s.t.}\quad &amp; x_{k+1} = A_k x_k + B_k u_k + c_k,\; k = 0, \dots, N-1, \end{aligned}\] <p>where $\bar{x} := \{ x_1, \dots, x_N \}$ and $\bar{u} := \{ u_0, \dots, u_{N-1} \}$. We consider the LQR problem as a quadratic program with equality constraints. The corresponding Lagrangian is then expresed as</p> \[\begin{aligned} \mathcal{L} (\bar{x}, \bar{u}, \bar{\lambda}) &amp;= \sum_{k=0}^{N-1} \Bigg( \begin{bmatrix} q_k \\ r_k \end{bmatrix}^\top \begin{bmatrix} x_k \\ u_k \end{bmatrix} + \frac{1}{2} \begin{bmatrix} x_k \\ u_k \end{bmatrix}^\top \begin{bmatrix} Q_k &amp; S_k^\top \\ S_k &amp; R_k \end{bmatrix} \begin{bmatrix} x_k \\ u_k \end{bmatrix} + \lambda_{k+1}^\top \left(A_k x_k + B_k u_k + c_k - x_{k+1} \right) \Bigg) \\ &amp;\quad\quad\quad + p_N^\top x_N + \frac{1}{2} x_N^T P_N x_N, \end{aligned}\] <p>where $\bar{\lambda} = (\lambda_1, \cdots, \lambda_N)$ is a vector of Lagrange multipliers. The KKT conditions are derived as</p> \[\begin{aligned} \frac{\partial \mathcal{L}}{\partial \bar{x}} = 0,\; \frac{\partial \mathcal{L}}{\partial \bar{u}} = 0,\; \frac{\partial \mathcal{L}}{\partial \bar{\lambda}} = 0. \end{aligned}\] <p>For $k = 0$,</p> \[\begin{aligned} 0 &amp;= r_0 + R_0 u_0 + S_0 x_0 + B_0^\top \lambda_{1}. \end{aligned}\] <p>For $0 &lt; k &lt;= N-1$,</p> \[\begin{aligned} 0 &amp;= q_k + Q_k x_k + S_k^\top u_k + A_k^\top \lambda_{k+1} - \lambda_k , \\ 0 &amp;= r_k + R_k u_k + S_k x_k + B_k^\top \lambda_{k+1}, \\ 0 &amp;= A_{k-1} x_{k-1} + B_{k-1} u_{k-1} + c_{k-1} - x_k. \end{aligned}\] <p>For $k = N$,</p> \[\begin{aligned} 0 &amp;= p_N + P_N x_N - \lambda_N , \\ 0 &amp;= A_{N-1} x_{N-1} + B_{N-1} u_{N-1} + c_{N-1} - x_N. \end{aligned}\] <p>The corresponding KKT system $(N = 3)$ is then</p> \[\begin{equation*} \left[ \begin{array}{ccccccccc} R_0 &amp; B_0^\top \\ B_0 &amp; &amp; -I\\ \hline &amp; -I &amp; Q_1 &amp; S_1^\top &amp; A_1^\top \\ &amp; &amp; S_1 &amp; R_1 &amp; B_1^\top \\ &amp; &amp; A_1 &amp; B_1 &amp; &amp; -I \\ \hline &amp; &amp; &amp; &amp; -I &amp; Q_2 &amp; S_2^\top &amp; A_2^\top \\ &amp; &amp; &amp; &amp; &amp; S_2 &amp; R_2 &amp; B_2^\top \\ &amp; &amp; &amp; &amp; &amp; A_2 &amp; B_2 &amp; &amp; -I \\ \hline &amp; &amp; &amp; &amp; &amp; &amp; &amp; -I &amp; P_3 \end{array} \right] \left[ \begin{array}{c} u_0 \\ \lambda_1 \\ \hline x_1 \\ u_1 \\ \lambda_2 \\ \hline x_2 \\ u_2 \\ \lambda_3 \\ \hline x_3 \end{array} \right] = \left[ \begin{array}{c} -r_0 - S_0 x_0 \\ -A x_0 - c_0 \\ \hline -q_1 \\ -r_1 \\ -c_1 \\ \hline -q_2 \\ -r_2 \\ -c_2 \\ \hline -p_3 \end{array} \right] \end{equation*}.\] <p>Next, we recursively factorize the KKT matrix, starting from the last two stages:</p> \[\begin{equation*} \left[ \begin{array}{ccccccccc} -I &amp; Q_{N-1} &amp; S_{N-1}^\top &amp; A_{N-1}^\top \\ &amp; S_{N-1} &amp; R_{N-1} &amp; B_{N-1}^\top \\ &amp; A_{N-1} &amp; B_{N-1} &amp; &amp; -I \\ \hline &amp; &amp; &amp; -I &amp; P_N \end{array} \right] \left[ \begin{array}{c} \lambda_{N-1} \\ \hline x_{N-1} \\ u_{N-1} \\ \lambda_{N} \\ \hline x_N \end{array} \right] = \left[ \begin{array}{c} -q_{N-1} \\ -r_{N-1} \\ -c_{N-1} \\ \hline -p_N \end{array} \right] \end{equation*}.\] <p>By adding the 4th row to the 3rd row multiplied by $P_N$, we can eliminate the 4th row and obtain</p> \[\begin{equation*} \left[ \begin{array}{ccccccccc} -I &amp; Q_{N-1} &amp; S_{N-1}^\top &amp; A_{N-1}^\top \\ &amp; S_{N-1} &amp; R_{N-1} &amp; B_{N-1}^\top \\ &amp; P_N A_{N-1} &amp; P_N B_{N-1} &amp; -I \end{array} \right] \left[ \begin{array}{c} \lambda_{N-1} \\ \hline x_{N-1} \\ u_{N-1} \\ \lambda_{N} \end{array} \right] = \left[ \begin{array}{c} -q_{N-1} \\ -r_{N-1} \\ -P_N c_{N-1} - p_N \end{array} \right] \end{equation*}.\] <p>To eliminate the 3rd row, we add it multiplied by $\textcolor{red}{A_{N-1}^\top}$ to the 1st row and add it multiplied by $\textcolor{blue}{B_{N-1}^\top}$ to the 2nd row, resulting in</p> \[\begin{equation*} \left[ \begin{array}{ccccccccc} -I &amp; Q_{N-1} + \textcolor{red}{A_{N-1}^\top} P_N A_{N-1} &amp; S_{N-1}^\top + \textcolor{red}{A_{N-1}^\top} P_N B_{N-1} \\ &amp; S_{N-1} + \textcolor{blue}{B_{N-1}^\top} P_N A_{N-1} &amp; R_{N-1} + \textcolor{blue}{B_{N-1}^\top} P_N B_{N-1} \\ \end{array} \right] \left[ \begin{array}{c} \lambda_{N-1} \\ \hline x_{N-1} \\ u_{N-1} \end{array} \right] = \left[ \begin{array}{c} -q_{N-1} - A_{N-1}^\top (P_N c_{N-1} + p_N) \\ -r_{N-1} - B_{N-1}^\top (P_N c_{N-1} + p_N) \end{array} \right] \end{equation*}.\] <p>For notational simplicity, we use</p> \[\begin{aligned} Q_{xx,k} &amp;= Q_{k} + A_k^\top P_{k+1}A_k\\ Q_{uu,k} &amp;= R_{k} + B_k^\top P_{k+1}B_k\\ Q_{ux,k} &amp;= S_{k} + B_k^\top P_{k+1}A_k \\ Q_{x,k} &amp;= q_k + A_k^\top \left( P_{k+1} c_k + p_{k+1} \right)\\ Q_{u,k} &amp;= r_k + B_k^\top \left( P_{k+1} c_k + p_{k+1} \right). \end{aligned}\] <p>We then represent $u_{N-1}$ in terms of $x_{N-1}$</p> \[\begin{aligned} Q_{ux, N-1} x_{N-1} + Q_{uu, N-1} u_{N-1} &amp;= - Q_{u, N-1} \\ u_{N-1} &amp;= - Q_{uu, N-1}^{-1} Q_{ux, N-1} x_{N-1} - Q_{uu, N-1}^{-1} Q_{u, N-1} \\ &amp;:= K_{N-1} x_{N-1} + d_{N-1}. \end{aligned}\] <p>We also have</p> \[\begin{aligned} -\lambda_{N-1} + Q_{xx, N-1} x_{N-1} + Q_{ux, N-1}^\top u_{N-1} &amp;= - Q_{x, N-1} \\ -\lambda_{N-1} + Q_{xx, N-1} x_{N-1} + Q_{ux, N-1}^\top (-Q_{uu, N-1}^{-1} Q_{ux, N-1} x_{N-1} - Q_{uu, N-1}^{-1} Q_{u, N-1}) &amp;= -Q_{x, N-1} \end{aligned}\] \[\begin{aligned} \lambda_{N-1} &amp;= \left( Q_{xx, N-1} - Q_{ux, N-1}^\top Q_{uu, N-1}^{-1} Q_{ux, N-1} \right) x_{N-1} + Q_{x, N-1} - Q_{ux, N-1}^\top Q_{uu, N-1}^{-1} Q_{u, N-1} \\ &amp;:= P_{N-1} x_{N-1} + p_{N-1}. \end{aligned}\] <p>This indicates the relation between $\lambda_k$ and $x_k$, and it is not difficult to derive the submatrix to be factorized at stage $k$</p> \[\begin{equation*} \left[ \begin{array}{ccccccccc} -I &amp; Q_{k} &amp; S_{k}^\top &amp; A_{k}^\top \\ &amp; S_{k} &amp; R_{k} &amp; B_{k}^\top \\ &amp; A_{k} &amp; B_{k} &amp; &amp; -I \\ \hline &amp; &amp; &amp; -I &amp; P_{k+1} \end{array} \right] \left[ \begin{array}{c} \lambda_{k} \\ \hline x_{k} \\ u_{k} \\ \lambda_{k+1} \\ \hline x_{k+1} \end{array} \right] = \left[ \begin{array}{c} -q_{k} \\ -r_{k} \\ -c_{k} \\ \hline -p_{k+1} \end{array} \right] \end{equation*}.\] <p>We can repeat the same procedure as above to factorize this submatrix until the initial stage. After the <strong>factorization phase</strong>, we use the computed matrices $K_k$ and $d_k$ to recover the optimal state and input trajectories. This is called the <strong>solution phase</strong>. The descriptions of the two algorithms are shown below.</p> <p align="center"> <img src="/assets/img/LQP/LQR_fact.png" width="700"/> </p> <p align="center"> <img src="/assets/img/LQP/LQR_sol.png" width="700"/> </p> <p>Note that Line 11 in Algorithm 1 can improve the numerical stability. The methods $\texttt{choFact}$ and $\texttt{choSolve}$ compute the Cholesky decomposition and solve the linear system using the Cholesky factorization, respectively.</p> <hr/> <p>Before proceeding with complexity analysis, we introduce the concept of the FLOP (Floating-Point Operation), which refers to a single operation involving floating-point numbers, such as:</p> <ul> <li>addition: $a + b$</li> <li>subtraction: $a - b$</li> <li>multiplication: $a b$</li> <li>division: $a/b$</li> </ul> <p>We often use flop counts to roughly estimate the computation time of a numerical method. Below, we present the flop counts relevant to this tutorial. For further details, please refer to Appendix C of the book by Boyd and Vandenberghe.</p> <table> <thead> <tr> <th>Operation</th> <th>FLOP Count (Approx.)</th> <th>Notes</th> </tr> </thead> <tbody> <tr> <td><strong>Dot product</strong> of two $n$-vectors</td> <td>$2n$</td> <td>$n$ mults + $n-1$ adds</td> </tr> <tr> <td><strong>Matrix-vector multiplication</strong> $A \in \mathbb{R}^{m \times n}, b \in \mathbb{R}^{n}$</td> <td>$2mn$</td> <td>Each row requires a dot product</td> </tr> <tr> <td><strong>Matrix-matrix multiplication</strong> $A \in \mathbb{R}^{m \times k}, B \in \mathbb{R}^{k \times n}$</td> <td>$2mkn$</td> <td>Without parallelization</td> </tr> <tr> <td><strong>Solving triangular system</strong> (e.g., forward/back substitution)</td> <td>$n^2$</td> <td>For $n \times n$ lower or upper triangular matrix</td> </tr> <tr> <td><strong>Cholesky factorization</strong> $A = LL^\top$, $A \in \mathbb{R}^{n \times n}$</td> <td>$\frac{1}{3}n^3$</td> <td>For dense matrices</td> </tr> <tr> <td><strong>Cholesky solve</strong> $b \in \mathbb{R}^{n \times p}, Ly = b, L^\top x = y$</td> <td>$2n^2p$</td> <td> </td> </tr> </tbody> </table> <p><br/></p> <p>We now separately count the number of flops required for the factorization and solution phases. In the factorization phase, we consider only the cubic terms, while in the solution phase, we focus solely on the quadratic terms.</p> <p><strong>Factorization phase</strong></p> <table> <thead> <tr> <th>Expression</th> <th>FLOP Count (Approx.)</th> </tr> </thead> <tbody> <tr> <td>$PA \leftarrow P_{k+1} A_k$</td> <td>$2n_x^3$</td> </tr> <tr> <td>$PB \leftarrow P_{k+1} B_k$</td> <td>$2n_x^2 n_u$</td> </tr> <tr> <td>$B^\top PA \leftarrow B_k^\top PA$</td> <td>$2n_x^2 n_u$</td> </tr> <tr> <td>$B^\top PB \leftarrow B_k^\top PB$</td> <td>$2n_x n_u^2$</td> </tr> <tr> <td>$A^\top PA \leftarrow A_k^\top PA$</td> <td>$2n_x^3$</td> </tr> <tr> <td>$L_{uu, k} \leftarrow \texttt{choFact}(Q_{uu, k})$</td> <td>$\frac{1}{3}n_u^3$</td> </tr> <tr> <td>$K_k \leftarrow \texttt{choSolve}(-Q_{ux, k}, L_{uu, k})$</td> <td>$2n_x n_u^2$</td> </tr> <tr> <td>$P_k \leftarrow Q_{xx, k} + Q_{ux, k}^\top \cdot K_k$</td> <td>$2n_x^2 n_u$</td> </tr> </tbody> </table> <p><br/></p> <p>Total flop counts:</p> \[N (4n_x^3 + 6n_x^2 n_u + 4n_x n_u^2 + \frac{1}{3}n_u^3)\] <p><strong>Solution phase</strong></p> <table> <thead> <tr> <th>Expression</th> <th>FLOP Count (Approx.)</th> </tr> </thead> <tbody> <tr> <td>$Pc = P_{k+1}c_k + p_{k+1}$</td> <td>$2n_x^2$</td> </tr> <tr> <td>$Q_{x, k} \leftarrow q_k + A_k^\top Pc$</td> <td>$2n_x^2$</td> </tr> <tr> <td>$Q_{u, k} \leftarrow r_k + B_k^\top Pc$</td> <td>$2n_x n_u$</td> </tr> <tr> <td>$d_k \leftarrow \texttt{choSolve}(-Q_{u, k}, L_{uu, k})$</td> <td>$2n_u^2$</td> </tr> <tr> <td>$p_k \leftarrow Q_{x, k} + Q_{ux, k}^\top d_k$</td> <td>$2n_x n_u$</td> </tr> <tr> <td>$u_k \leftarrow K_k x_k + d_k $</td> <td>$2n_x n_u$</td> </tr> <tr> <td>$x_k \leftarrow A_k x_k + B_k u_k + c_k$</td> <td>$2n_x^2 + 2n_x n_u$</td> </tr> </tbody> </table> <p><br/></p> <p>Total flop counts:</p> \[N (6 n_x^2 + 8 n_x n_u + 2 n_u^2)\] <p><br/></p> <h1 id="efficient-riccati-recursion">Efficient Riccati Recursion</h1> <p>In this section, we improve the efficiency of the Riccati recursion. First, we introduce some useful matrix operations.</p> <table> <thead> <tr> <th>Operation</th> <th>FLOP Count (Approx.)</th> </tr> </thead> <tbody> <tr> <td><strong>Triangular Matrix-matrix multiplication (trmm)</strong> $A \in \mathbb{R}^{m \times m} (\text{triangular matrix}), B \in \mathbb{R}^{m \times n}$</td> <td>$m^2n$</td> </tr> <tr> <td><strong>Symmetric Rank-k Update (syrk)</strong> $A \in \mathbb{R}^{m \times n},\; A A^\top$</td> <td>$m^2 n$</td> </tr> </tbody> </table> <p><br/></p> <p>The square-root Riccati recursion is proposed in [1]. The key idea is to carry out the recursion in terms of the Cholesky factor $\mathcal{L}_k$ rather than $P_k$. The algorithm is provided below, along with the flop counts.</p> <p align="center"> <img src="/assets/img/LQP/LQR_fact_sqrt.png" width="700"/> </p> <p>The total flop counts are</p> \[N \left(\frac{7}{3} n_x^3 + 4 n_x^2 n_u + 2 n_x n_u^2 + \frac{1}{3} n_u^3 \right).\] <p>Let us have a close look at Line 5.</p> \[\begin{bmatrix} L_{uu, k} \\ L_{xu, k} &amp; L_{xx, k} \end{bmatrix} \begin{bmatrix} L_{uu, k} \\ L_{xu, k} &amp; L_{xx, k} \end{bmatrix}^\top = \begin{bmatrix} L_{uu, k} L_{uu, k}^\top &amp; L_{uu, k} L_{xu, k}^\top \\ L_{xu, k} L_{uu, k}^\top &amp; L_{xu, k} L_{xu, k}^\top + L_{xx, k} L_{xx, k}^\top \end{bmatrix} = \begin{bmatrix} R_k + B_k^\top P_{k+1} B_k \\ S_k^\top + A_k^\top P_{k+1} B_k &amp; Q_k + A_k^\top P_{k+1} A_k \end{bmatrix}\] \[\begin{aligned} L_{uu, k} &amp;= \texttt{choFact} (R_k + B_k^\top P_{k+1} B_k) \\ L_{xu, k} &amp;= (S_k^\top + A_k^\top P_{k+1} B_k) L_{uu, k}^{-\top} \\ L_{xx, k} &amp;= \texttt{choFact} (Q_k + A_k^\top P_{k+1} A_k - L_{xu, k} L_{xu, k}^\top) \end{aligned}\] \[\begin{aligned} Q_k + A_k^\top P_{k+1} A_k - L_{xu, k} L_{xu, k}^\top &amp;= Q_k + A_k^\top P_{k+1} A_k - (S_k^\top + A_k^\top P_{k+1} B_k) L_{uu, k}^{-\top} L_{uu, k}^{-1} (S_k^\top + A_k^\top P_{k+1} B_k)^\top \\ &amp;:= Q_{xx, k} - Q_{ux, k}^\top Q_{uu, k}^{-1} Q_{ux, k} \\ &amp;:= Q_{xx, k} + Q_{ux, k}^\top K_k \end{aligned}\] <p><br/><br/></p> <p>[1] G. Frison and J. B. Jørgensen, “Efficient implementation of the Riccati recursion for solving linear-quadratic control problems,” <em>2013 IEEE International Conference on Control Applications (CCA)</em>, Hyderabad, India, 2013, pp. 1117-1122.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[In this blog, we introduce the recursive method for solving the following LQR problem:]]></summary></entry></feed>